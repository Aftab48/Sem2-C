#include <stdio.h>

// Function to swap using call by value
void swapByValue(int a, int b) {
    int temp = a;
    a = b;
    b = temp;
    printf("Inside swapByValue - a: %d, b: %d\n", a, b);
}

// Function to swap using call by reference
void swapByReference(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int main() {
    int x = 10, y = 20;

    // Call by Value
    printf("Before swapByValue - x: %d, y: %d\n", x, y);
    swapByValue(x, y);
    printf("After swapByValue - x: %d, y: %d\n\n", x, y);

    // Call by Reference
    printf("Before swapByReference - x: %d, y: %d\n", x, y);
    swapByReference(&x, &y);
    printf("After swapByReference - x: %d, y: %d\n", x, y);

    return 0;
}




#include <stdio.h>

// Recursive function to calculate factorial
int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;  // Base case
    else
        return n * factorial(n - 1);  // Recursive case
}

int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);

    if (num < 0)
        printf("Factorial is not defined for negative numbers.\n");
    else
        printf("Factorial of %d is %d\n", num, factorial(num));

    return 0;
}








#include <stdio.h>

// Recursive function to find GCD using Euclidean algorithm
int gcd(int a, int b) {
    if (b == 0)
        return a;  // Base case
    else
        return gcd(b, a % b);  // Recursive case
}

int main() {
    int num1, num2;
    printf("Enter two numbers: ");
    scanf("%d %d", &num1, &num2);

    printf("GCD of %d and %d is %d\n", num1, num2, gcd(num1, num2));

    return 0;
}





#include <stdio.h>

// Recursive function to compute x raised to the power n
int power(int x, int n) {
    if (n == 0)
        return 1;  // Base case: x^0 = 1
    else
        return x * power(x, n - 1);  // Recursive case
}

int main() {
    int base, exponent;
    printf("Enter base and exponent: ");
    scanf("%d %d", &base, &exponent);

    printf("%d raised to the power %d is %d\n", base, exponent, power(base, exponent));

    return 0;
}







#include <stdio.h>

// Recursive factorial function
int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;  // Base case
    else
        return n * factorial(n - 1);  // Recursive case
}

int main() {
    int n, r;
    printf("Enter values of n and r: ");
    scanf("%d %d", &n, &r);

    if (n < r) {
        printf("Invalid input: n should be greater than or equal to r.\n");
        return 1;
    }

    int nPr = factorial(n) / factorial(n - r);
    int nCr = factorial(n) / (factorial(r) * factorial(n - r));

    printf("nPr = %d\n", nPr);
    printf("nCr = %d\n", nCr);

    return 0;
}





#include <stdio.h>

// Recursive function to convert binary to decimal
int binaryToDecimal(int binary) {
    if (binary == 0)
        return 0;
    else
        return (binary % 10) + 2 * binaryToDecimal(binary / 10);
}

// Recursive function to print decimal to binary
void decimalToBinary(int decimal) {
    if (decimal == 0)
        return;
    decimalToBinary(decimal / 2);
    printf("%d", decimal % 2);
}

int main() {
    int choice, num;

    printf("Choose conversion:\n1. Binary to Decimal\n2. Decimal to Binary\nEnter choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        printf("Enter binary number: ");
        scanf("%d", &num);
        printf("Decimal: %d\n", binaryToDecimal(num));
    } else if (choice == 2) {
        printf("Enter decimal number: ");
        scanf("%d", &num);
        if (num == 0)
            printf("Binary: 0\n");
        else {
            printf("Binary: ");
            decimalToBinary(num);
            printf("\n");
        }
    } else {
        printf("Invalid choice\n");
    }

    return 0;
}
